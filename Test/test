// UserServiceTests.cs
public class UserServiceTests : IDisposable
{
    private readonly Mock<IUserRepository> _mockRepo = new();
    private readonly UserService _userService;

    public UserServiceTests()
    {
        _userService = new UserService(_mockRepo.Object);
    }

    [Fact]
    public void Login_ValidCredentials_ReturnsUser()
    {
        // 模拟数据
        var user = new User { Username = "admin", PasswordHash = BCrypt.Net.BCrypt.HashPassword("123456") };
        _mockRepo.Setup(x => x.GetUserByUsername("admin")).Returns(user);

        // 执行登录
        var result = _userService.Login("admin", "123456");
        
        Assert.NotNull(result);
        Assert.Equal("admin", result.Username);
    }

    [Fact]
    public void Login_InvalidPassword_ThrowsException()
    {
        _mockRepo.Setup(x => x.GetUserByUsername("admin"))
            .Returns(new User { PasswordHash = "hashed_password" });

        Assert.Throws<AuthenticationException>(() => 
            _userService.Login("admin", "wrong_password"));
    }

    public void Dispose() => _mockRepo.Reset();
}
}
// PermissionServiceTests.cs
public class PermissionServiceTests
{
    [Fact]
    public void CheckPermission_AdminRole_ReturnsTrue()
    {
        var user = new User { 
            Role = new Role { 
                Permissions = new List<string> { "task:delete" } 
            } 
        };
        
        var service = new PermissionService();
        var result = service.CheckPermission(user, "task:delete");
        
        Assert.True(result);
    }
}
// TaskGraphTests.cs
public class TaskGraphTests : TestContext
{
    [Fact]
    public void Render_Tasks_ShowNodes()
    {
        // 准备测试数据
        var tasks = new List<TaskItem>
        {
            new TaskItem { Id = 1, Name = "需求分析" },
            new TaskItem { Id = 2, Name = "UI设计" }
        };

        // 渲染组件
        var cut = RenderComponent<TaskGraph>(parameters => 
            parameters.Add(p => p.Tasks, tasks));

        // 验证渲染结果
        var nodes = cut.FindAll(".task-node");
        Assert.Equal(2, nodes.Count);
        Assert.Contains("需求分析", cut.Markup);
    }
}
// CommentComponentTests.cs
public class CommentComponentTests : TestContext
{
    [Fact]
    public void Submit_EmptyComment_ShowsError()
    {
        var cut = RenderComponent<CommentForm>();
        cut.Find("button").Click();
        
        Assert.Contains("评论内容不能为空", cut.Markup);
    }
}